$Id: README,v 1.13 2000/03/24 04:45:10 mpeppler Exp $
	
	   DBD::Sybase  --  a Sybase DBI driver for Perl 5.

   Copyright (c) 1996, 1997, 1998, 1999  Michael Peppler

   You may distribute under the terms of either the GNU General Public
   License or the Artistic License, as specified in the Perl README file.

		WARNING: THIS IS ALPHA SOFTWARE.
		    IT IS INCOMPLETE!
		IT IS POSSIBLY UNRELIABLE!



This Sybase DBI driver is built using the Sybase OpenClient Client
Library (aka CT-library). You will need to have that installed before
you can do anything with this package. You will also need Tim Bunce's
DBI module, latest release. DBI is available from CPAN, in

    "CPAN"/authors/id/TIMB/DBI/DBI-1.xx-tar.gz

The Sybase OpenClient libraries are of course available from Sybase.
For Linux you can get the full Sybase ASE 11.0.3.3 release for free
(this includes the server and the client libraries.)
See http://linux.sybase.com for details, or my homepage 
(http://www.mbay.net/~mpeppler).

DBD::Sybase is a reasonably complete implementation of the DBI spec, but 
there are still some features that are missing. Please see the DBD::Sybase
man page for details.

Recent changes:

Release 0.22

	Bug Fixes:

	271: execute() does not restart a transaction after a rollback
             or commit when running multiple execute() calls for the 
	     same statement handle.
	294: SEGV on executing a prepared statement with undef values.
	295: SEGV due to printf w/ null pointer
	299: Missing dTHR in syb_st_prepare().


Release 0.21

	Added constant() function, so that if DBD::Sybase is use'd you 
	can access some CS_xxx_RESULT constants.
	Added $sth->func('syb_output_params') to allow for easier
	retrieval of stored proc OUTPUT parameters.
	Added syb_do_proc_status database attribute to allow $sth->execute
	to handle stored procedure return status directly, and to fail if
	the stored proc has a non-0 return status. This should also fix 
	bug 255.
	Errors with severity 10 or below are not stored in $DBI::err 
	anymore. Use $dbh->{syb_err_handler} to get at those warning
	messages.
	Added t/fail.t test script to better test failure modes.
	Setting AutoCommit on a $dbh with active statement handles is now 
	a fatal error.

	Bug Fixes:

	255: Memory leak for prepared statements that are not executed.
	264: make test fails when building DBD::Sybase against
	     OpenClient 10.x.
	266: make test fails when building DBD::Sybase with perl 5.004_04
	     or earlier.
	268: $sth->execute(x,y,z) (ie executing a prepare'd statment that
	     has ?-style placeholders) does not return undef if a
	     constraint violation occurs on the insert/update/delete.


Release 0.20

	Fix code to allow prepare, execute, execute, execute... on 
	statements that don't include ?-style placeholders.
	Fix LENGTH/PRECISION/SCALE $sth attributes to be closer to the
	DBI spec.
	Fix core dump problem when binding undef values and having 
	trace >= 2.
	Add syb_quoted_identifier connection/database handle attribute.
	Add syb_oc_version read-only database handle attribute, returns the 
	Sybase library version that this binary is currently using.
	Added the syb_rowcount $dbh attribute.
	Added $sth->cancel().
	Call the syb_err_handler (if one is defined) for client-side
	errors.



Building:

This version attempts to find out which libraries it needs by looking
at $SYBASE/lib. This behaviour is experimental, and will only work
on Unix and VMS systems (ie on Win32 you still have to edit the CONFIG
file the old way), but appears to work fine on the two systems I have
access to (Sybase 11.5/Solaris 7 & Sybase 11.0.3.3/linux) and on Sybase
10.0.2.3/OpenVMS AXP 7.1. It assumes that $SYBASE is set and points to 
the Sybase installation directory that you want to use to build DBD::Sybase.

Start by editing the PWD file to set a valid user, password and server
for the test scripts to use.
Make sure that the SYBASE environment variable points to the Sybase
installation that you want to use for this build.

Then run 
	perl Makefile.PL
If there were warnings about missing libraries, go to the manual 
configuration, below.
Run
	make
If the make failed, go to the manual configuration, below.
Run
	make test
If this succeeds you can install the package, via
	make install
(which you probably have to run as root.)

Manual Configuration:

If the automatic configuration fails, then you will have to edit the
CONFIG file, and set the EXTRA_LIBS entry according to your OS and
Sybase release, and then run 
	perl Makefile.PL --file

The CONFIG file can be used to set certain system variables that
are needed for the build. 
	SYBASE is the root directory of your Sybase installation. DBD::Sybase
	will use $SYBASE/lib and $SYBASE/include during the build.

	EXTRA_LIBS lists any extra libraries that are required on your
	system. For example, Solaris 2.x needs -ltli. See your OS specific
	documentation supplement from Sybase to determine what is required.

	DBI_INCLUDE is the directory where DBI installed its include files.
	Makefile.PL will normally deduce this directory from perl's Config
	module, so you only need to set this if Makefile.PL fails.

	LINKTYPE. Uncomment and set to 'static' if you want to build
	DBD::Sybase statically (ie always included in a new perl binary).

Edit PWD, and set the user, password and server that you want to use for the 
'make test'.

Run perl Makefile.PL, make, make test.

If everything's fine, run "make install" to move the files to your 
installed perl library tree.


Known Problems:
===============

On Solaris 2.x make test will fail if LD_LIBRARY_PATH is set and has
/usr/lib or /lib before $SYBASE/lib. This is because both Solaris 2.x
and Sybase have a library called libintl.so, and if /usr/lib is placed 
before $SYBASE/lib in LD_LIBRARY_PATH the dynamic loader will search
the wrong library when loading DBD::Sybase. In general it is not
necessary to set LD_LIBRARY_PATH on Solaris, and it is only rarely
necessary to include /usr/lib or /lib in the LD_LIBRARY_PATH as those
directories will be searched by default.


The regression tests are minimal at the moment so don't necessarily
believe all is fine if the tests succeed...

NOTE: t/fail.t will *fail* on test #8 if you are connecting to 
      an 11.0.3.3 server. This is a bug in the server, and not something
      that I can do anything about, unfortunately. It's a fairly
      obscure constraint violation condition - read the code if
      you are interested.

I have a simple bug tracking database at http://gw.peppler.org/cgi-bin/bug.cgi
You can use it to check for known problems, and to report new ones. Keep
in mind that peppler.org lives on the end of a K56 dialup line, so it
may be slow.


Let me repeat: this is ALPHA software - testing has been minimal!!!

See perldoc DBD::Sybase for details about the package.

Comments, criticism, etc. welcome!

Michael
--
Michael Peppler, Data Migrations, Inc.
mpeppler@peppler.org - http://www.mbay.net/~mpeppler

